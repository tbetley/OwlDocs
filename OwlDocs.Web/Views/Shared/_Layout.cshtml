@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using OwlDocs.Web.Authorization
@using OwlDocs.Web.Options
@using OwlDocs.Domain.DocumentCache;
@using OwlDocs.Domain.DocumentService;
@inject IAuthorizationService _auth
@inject IOptions<SiteOptions> site
@inject IDocumentCache _cache;
@inject IDocumentService _docSvc;
@{
    bool isAdmin = (await _auth.AuthorizeAsync(User, Policies.SiteAdminsPolicy)).Succeeded;
    var _site = site.Value;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.min.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="icon" type="image/x-icon" href="~/favicon.ico" />
    <link rel="apple-touch-icon" href="~/apple-touch-icon.png" />
    @await RenderSectionAsync("Css", required: false)
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-controller="Home" asp-action="Index">@_site.SiteTitle</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
                <div class="me-3">
                    @if (isAdmin)
                    {
                        <a asp-controller="Admin" asp-action="Index">Admin</a>
                    }
                    <span>User: @(User.Identity.Name)</span>
                </div>
            </div>
        </nav>
    </header>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-auto">
                @{
                    if (_cache.Tree == null || _cache.Tree.Children.Count == 0)
                    {
                        _cache.Tree = await _docSvc.GetDocumentTree();
                    }

                    var path = ViewData["path"] as string;
                }

                @*Side bar*@
                <div class="sidebar">
                    <div class="d-md-none">
                        <button data-bs-toggle="collapse" data-bs-target="#collapseSidebar" type="button" class="btn btn-outline-primary">Open</button>
                    </div>
                    <div class="collapse d-md-block" id="collapseSidebar">
                        <div class="mb-2">
                            <button id="newFile" class="btn btn-sm btn-outline-primary mr-2">+ File</button>
                            <button id="newFolder" class="btn btn-sm btn-outline-dark">+ Folder</button>
                            <button id="newImage" class="btn btn-sm btn-outline-success">+ Image</button>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="showImagesCheckbox">
                            <label class="form-check-label" for="showImagesCheckbox">
                                Show Images
                            </label>
                        </div>
                        <div id="sidebar-items">
                            @{
                                await PrintTree(_cache.Tree, path);
                            }
                        </div>
                    </div>
                </div>

                @*Context menu*@
                <div id="menu" class="menu">
                    <div class="d-flex border border-2 border-rounded">
                        <form id="menuForm" asp-controller="Docs" asp-action="DeleteDocument" method="post">
                            <input id="menuPathInput" type="hidden" name="Path" value="" />
                            <input id="menuTypeInput" type="hidden" name="Type" value="" />
                            <input id="menuIdInput" type="hidden" name="Id" value="" />
                            <input type="submit" class="btn btn-sm btn-outline-danger" value="Delete" />
                        </form>
                        <button id="menuRename" class="btn btn-outline-success btn-sm d-none">Rename</button>
                    </div>
                </div>

            </div>
            <div class="col mt-3 mt-md-0">
                @RenderBody()
            </div>
        </div>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2021 - OwlDocs.Web - <a asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <div id="imageUploadModal" class="modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <form asp-controller="Image" asp-action="CreateImage" method="post" enctype="multipart/form-data">
                    <div class="modal-header">
                        <h5 class="modal-title">Image Upload</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div>
                            <label for="fileUploadParentPath" class="form-label">Parent Path:</label>
                            <input id="fileUploadParentPath" name="ParentPath" class="form-control" type="text" value="" readonly />
                            <label for="fileUploadParentId" class="form-label">Parent Id:</label>
                            <input id="fileUploadParentId" name="ParentId" class="form-control" type="text" value="" readonly />
                            <label for="fileUpload" class="form-label">Image:</label>
                            <input id="fileUpload" name="Files" type="file" class="form-control" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="~/lib/bootstrap/js/bootstrap.bundle.min.js" asp-append-version="true"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>



@*
    Prints the provided document tree
*@
@functions {
    public async Task PrintTree(DocumentTree tree, string path)
    {
        <div class="item-group">            
            @if (tree.Type == (int)DocumentType.Root)
            {
                <div class="directory" draggable="false">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-folder2 directory-icon" viewBox="0 0 16 16">
                        <path d="M1 3.5A1.5 1.5 0 0 1 2.5 2h2.764c.958 0 1.76.56 2.311 1.184C7.985 3.648 8.48 4 9 4h4.5A1.5 1.5 0 0 1 15 5.5v7a1.5 1.5 0 0 1-1.5 1.5h-11A1.5 1.5 0 0 1 1 12.5v-9zM2.5 3a.5.5 0 0 0-.5.5V6h12v-.5a.5.5 0 0 0-.5-.5H9c-.964 0-1.71-.629-2.174-1.154C6.374 3.334 5.82 3 5.264 3H2.5zM14 7H2v5.5a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 .5-.5V7z" />
                    </svg>
                    <span class="directory-name" data-id="@tree.Id" data-path="/" data-type="0" data-name="">/</span>
                </div>
            }
            @if (tree.Type == (int)DocumentType.Directory)
            {
                <div class="directory" draggable="true">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-folder2 directory-icon" viewBox="0 0 16 16">
                        <path d="M1 3.5A1.5 1.5 0 0 1 2.5 2h2.764c.958 0 1.76.56 2.311 1.184C7.985 3.648 8.48 4 9 4h4.5A1.5 1.5 0 0 1 15 5.5v7a1.5 1.5 0 0 1-1.5 1.5h-11A1.5 1.5 0 0 1 1 12.5v-9zM2.5 3a.5.5 0 0 0-.5.5V6h12v-.5a.5.5 0 0 0-.5-.5H9c-.964 0-1.71-.629-2.174-1.154C6.374 3.334 5.82 3 5.264 3H2.5zM14 7H2v5.5a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 .5-.5V7z" />
                    </svg>
                    <span class="directory-name" data-id="@tree.Id" data-path="@tree.Path" data-type="@tree.Type.ToString("D")" data-name="@tree.Name">@tree.Name</span>
                </div>
            }
            else if (tree.Type == (int)DocumentType.File)
            {
                <div class="file @(tree.Path == path ? "selected" : "")" draggable="true">
                    <a href="@("/Docs" + tree.UriPath)" class="file-name" data-id="@tree.Id" data-path="@tree.Path" data-type="@tree.Type.ToString("D")" data-name="@tree.Name">@tree.Name</a>
                </div>
            }
            else if (tree.Type == (int)DocumentType.Image)
            {
                <div class="file image image-hidden @(tree.Path == path ? "selected" : "")" draggable="true">
                    <a href="@("/Docs" + tree.UriPath)" class="file-name" data-id="@tree.Id" data-path="@tree.Path" data-type="@tree.Type.ToString("D")" data-name="@tree.Name">@tree.Name</a>
                </div>
            }
            
            @{
                string active = "";
                if (path != null)
                {
                    if (path.Contains(tree.Path))
                    {
                        active = "active";
                    }
                }                
            }
            <div class="child-item @active @(tree.Type == (int)DocumentType.Root ? "active" : null)">
                @if (tree.Children.Count > 0)
                {
                    var files = tree.Children.Where(t => t.Type == (int)DocumentType.File);
                    var images = tree.Children.Where(t => t.Type == (int)DocumentType.Image);
                    var directories = tree.Children.Where(t => t.Type == (int)DocumentType.Directory);

                    foreach (var file in files)
                    {
                        await PrintTree(file, path);
                    }

                    foreach (var image in images)
                    {
                        await PrintTree(image, path);
                    }

                    foreach (var dir in directories)
                    {
                        await PrintTree(dir, path);
                    }
                }
            </div>
        </div>
    }
}